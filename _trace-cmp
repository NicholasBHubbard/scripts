#!/usr/bin/perl

use strict;
use warnings;
use v5.16;
use autodie;
use Getopt::Long;

GetOptions(
    'count|c=i'   => \(my $INSTR_COUNT = 0),
    'cmp-bef|B=i' => \(my $BEFORE_RANGE = 10),
    'cmp-aft|A=i' => \(my $AFTER_RANGE = 10)
);

die "_trace-cmp [opts..] TARGET_INSTR_ADDR T1_TRACE T1_REGEX T2_TRACE T2_REGEX\n" 
	unless @ARGV == 5;

my ($TARGET_INSTR_ADDR, $T1_TRACE, $T1_RX, $T2_TRACE, $T2_RX) = @ARGV;

main();

sub main {
    open my $t1_fh, '<', $T1_TRACE;
    open my $t2_fh, '<', $T2_TRACE;

	chomp(my @t1_instrs =  grep { my @_v = t1_parse_instr($_); @_v > 0 } <$t1_fh>);
	chomp(my @t2_instrs = grep { my @_v = t2_parse_instr($_); @_v > 0 } <$t2_fh>);

	my $t1_count = 0;
	my $t1_instr_idx;
	for (my $i = 0; $i < @t1_instrs; $i++) {
		my ($addr) = t1_parse_instr($t1_instrs[$i]);
		if (hex($addr) == hex($TARGET_INSTR_ADDR)) {
			if ($t1_count == $INSTR_COUNT) {
				$t1_instr_idx = $i;
				last;
			} else { $t1_count++ }
		}
	}
	die "could not find instr $TARGET_INSTR_ADDR in file '$T1_TRACE'\n" unless defined $t1_instr_idx;
	my $t1_lower_idx = $t1_instr_idx - $BEFORE_RANGE;
	$t1_lower_idx = 0 if $t1_lower_idx < 0;
	my $t1_upper_idx = $t1_instr_idx + $BEFORE_RANGE;
	$t1_upper_idx = @t1_instrs-1 if $t1_upper_idx >= @t1_instrs;
	my @t1_instr_slice = @t1_instrs[$t1_lower_idx..$t1_upper_idx];

	my $t2_count = 0;
	my $t2_instr_idx;
	for (my $i = 0; $i < @t2_instrs; $i++) {
		my ($addr) = t2_parse_instr($t2_instrs[$i]);
		if (hex($addr) == hex($TARGET_INSTR_ADDR)) {
			if ($t2_count == $INSTR_COUNT) {
				$t2_instr_idx = $i;
				last;
			} else { $t2_count++ }
		}
	}
	die "could not find instr $TARGET_INSTR_ADDR in file '$T2_TRACE'\n" unless defined $t2_instr_idx;
	my $t2_lower_idx = $t2_instr_idx - $BEFORE_RANGE;
	$t2_lower_idx = 0 if $t2_lower_idx < 0;
	my $t2_upper_idx = $t2_instr_idx + $BEFORE_RANGE;
	$t2_upper_idx = @t2_instrs-1 if $t2_upper_idx >= @t2_instrs;
	my @t2_instr_slice = @t2_instrs[$t2_lower_idx..$t2_upper_idx];

	say ' 'x10, 'T1', ' 'x20, '|', ' 'x10, 'T2', ' 'x20;
	say '-'x79;
	my $max = @t1_instr_slice; 
	$max = @t2_instr_slice if @t2_instr_slice > @t1_instr_slice;
	for (my $i = 0; $i < $max; $i++) {
		my $t1_instr = $t1_instr_slice[$i];
		my $t2_instr = $t2_instr_slice[$i];
		printf "%-31s | %s\n", $t1_instr, $t2_instr;
    }
}

sub t1_parse_instr {
	my $instr = shift;
	if (my ($addr, $op) = $instr =~ $T1_RX) {
		return ($addr, $op);
	}
	return ();
}

sub t2_parse_instr {
	my $instr = shift;
	if (my ($addr, $op) = $instr =~ $T2_RX) {
		return ($addr, $op);
	}
	return ();
}
